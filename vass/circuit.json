{
 "mainCode": "{\n    {\n        {\n            {\n                {\n                }\n            }\n        }\n        {\n        }\n    }\n}\n",
 "signalName2Idx": {
  "one": 0,
  "main.state[0]": 6,
  "main.state[1]": 7,
  "main.state[2]": 8,
  "main.state[3]": 9,
  "main.state[4]": 10,
  "main.sub[0]": 11,
  "main.sub[1]": 12,
  "main.sub[2]": 13,
  "main.sub[3]": 14,
  "main.sub[4]": 15,
  "main.add[0]": 16,
  "main.add[1]": 17,
  "main.add[2]": 18,
  "main.add[3]": 19,
  "main.add[4]": 20,
  "main.result[0]": 21,
  "main.result[1]": 22,
  "main.result[2]": 23,
  "main.result[3]": 24,
  "main.result[4]": 25,
  "main.yield[0]": 1,
  "main.yield[1]": 2,
  "main.yield[2]": 3,
  "main.yield[3]": 4,
  "main.yield[4]": 5,
  "main.eq[0].in[0]": 21,
  "main.eq[0].in[1]": 26,
  "main.eq[0].out": 1,
  "main.eq[0].isz.in": 27,
  "main.eq[0].isz.out": 1,
  "main.eq[0].isz.inv": 28,
  "main.eq[1].in[0]": 22,
  "main.eq[1].in[1]": 29,
  "main.eq[1].out": 2,
  "main.eq[1].isz.in": 30,
  "main.eq[1].isz.out": 2,
  "main.eq[1].isz.inv": 31,
  "main.eq[2].in[0]": 23,
  "main.eq[2].in[1]": 32,
  "main.eq[2].out": 3,
  "main.eq[2].isz.in": 33,
  "main.eq[2].isz.out": 3,
  "main.eq[2].isz.inv": 34,
  "main.eq[3].in[0]": 24,
  "main.eq[3].in[1]": 35,
  "main.eq[3].out": 4,
  "main.eq[3].isz.in": 36,
  "main.eq[3].isz.out": 4,
  "main.eq[3].isz.inv": 37,
  "main.eq[4].in[0]": 25,
  "main.eq[4].in[1]": 38,
  "main.eq[4].out": 5,
  "main.eq[4].isz.in": 39,
  "main.eq[4].isz.out": 5,
  "main.eq[4].isz.inv": 40
 },
 "components": [
  {
   "name": "main",
   "params": {
    "n": "5"
   },
   "template": "VAAS",
   "inputSignals": 20
  },
  {
   "name": "main.eq[0]",
   "params": {},
   "template": "IsEqual",
   "inputSignals": 2
  },
  {
   "name": "main.eq[1]",
   "params": {},
   "template": "IsEqual",
   "inputSignals": 2
  },
  {
   "name": "main.eq[2]",
   "params": {},
   "template": "IsEqual",
   "inputSignals": 2
  },
  {
   "name": "main.eq[3]",
   "params": {},
   "template": "IsEqual",
   "inputSignals": 2
  },
  {
   "name": "main.eq[4]",
   "params": {},
   "template": "IsEqual",
   "inputSignals": 2
  },
  {
   "name": "main.eq[0].isz",
   "params": {},
   "template": "IsZero",
   "inputSignals": 1
  },
  {
   "name": "main.eq[1].isz",
   "params": {},
   "template": "IsZero",
   "inputSignals": 1
  },
  {
   "name": "main.eq[2].isz",
   "params": {},
   "template": "IsZero",
   "inputSignals": 1
  },
  {
   "name": "main.eq[3].isz",
   "params": {},
   "template": "IsZero",
   "inputSignals": 1
  },
  {
   "name": "main.eq[4].isz",
   "params": {},
   "template": "IsZero",
   "inputSignals": 1
  }
 ],
 "componentName2Idx": {
  "main": 0,
  "main.eq[0]": 1,
  "main.eq[1]": 2,
  "main.eq[2]": 3,
  "main.eq[3]": 4,
  "main.eq[4]": 5,
  "main.eq[0].isz": 6,
  "main.eq[1].isz": 7,
  "main.eq[2].isz": 8,
  "main.eq[3].isz": 9,
  "main.eq[4].isz": 10
 },
 "signals": [
  {
   "names": [
    "one"
   ],
   "triggerComponents": []
  },
  {
   "names": [
    "main.yield[0]",
    "main.eq[0].out",
    "main.eq[0].isz.out"
   ],
   "triggerComponents": []
  },
  {
   "names": [
    "main.yield[1]",
    "main.eq[1].out",
    "main.eq[1].isz.out"
   ],
   "triggerComponents": []
  },
  {
   "names": [
    "main.yield[2]",
    "main.eq[2].out",
    "main.eq[2].isz.out"
   ],
   "triggerComponents": []
  },
  {
   "names": [
    "main.yield[3]",
    "main.eq[3].out",
    "main.eq[3].isz.out"
   ],
   "triggerComponents": []
  },
  {
   "names": [
    "main.yield[4]",
    "main.eq[4].out",
    "main.eq[4].isz.out"
   ],
   "triggerComponents": []
  },
  {
   "names": [
    "main.state[0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.state[1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.state[2]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.state[3]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.state[4]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.sub[0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.sub[1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.sub[2]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.sub[3]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.sub[4]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.add[0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.add[1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.add[2]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.add[3]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.add[4]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.result[0]",
    "main.eq[0].in[0]"
   ],
   "triggerComponents": [
    0,
    1
   ]
  },
  {
   "names": [
    "main.result[1]",
    "main.eq[1].in[0]"
   ],
   "triggerComponents": [
    0,
    2
   ]
  },
  {
   "names": [
    "main.result[2]",
    "main.eq[2].in[0]"
   ],
   "triggerComponents": [
    0,
    3
   ]
  },
  {
   "names": [
    "main.result[3]",
    "main.eq[3].in[0]"
   ],
   "triggerComponents": [
    0,
    4
   ]
  },
  {
   "names": [
    "main.result[4]",
    "main.eq[4].in[0]"
   ],
   "triggerComponents": [
    0,
    5
   ]
  },
  {
   "names": [
    "main.eq[0].in[1]"
   ],
   "triggerComponents": [
    1
   ]
  },
  {
   "names": [
    "main.eq[0].isz.in"
   ],
   "triggerComponents": [
    6
   ]
  },
  {
   "names": [
    "main.eq[0].isz.inv"
   ],
   "triggerComponents": []
  },
  {
   "names": [
    "main.eq[1].in[1]"
   ],
   "triggerComponents": [
    2
   ]
  },
  {
   "names": [
    "main.eq[1].isz.in"
   ],
   "triggerComponents": [
    7
   ]
  },
  {
   "names": [
    "main.eq[1].isz.inv"
   ],
   "triggerComponents": []
  },
  {
   "names": [
    "main.eq[2].in[1]"
   ],
   "triggerComponents": [
    3
   ]
  },
  {
   "names": [
    "main.eq[2].isz.in"
   ],
   "triggerComponents": [
    8
   ]
  },
  {
   "names": [
    "main.eq[2].isz.inv"
   ],
   "triggerComponents": []
  },
  {
   "names": [
    "main.eq[3].in[1]"
   ],
   "triggerComponents": [
    4
   ]
  },
  {
   "names": [
    "main.eq[3].isz.in"
   ],
   "triggerComponents": [
    9
   ]
  },
  {
   "names": [
    "main.eq[3].isz.inv"
   ],
   "triggerComponents": []
  },
  {
   "names": [
    "main.eq[4].in[1]"
   ],
   "triggerComponents": [
    5
   ]
  },
  {
   "names": [
    "main.eq[4].isz.in"
   ],
   "triggerComponents": [
    10
   ]
  },
  {
   "names": [
    "main.eq[4].isz.inv"
   ],
   "triggerComponents": []
  }
 ],
 "constraints": [
  [
   {
    "21": "21888242871839275222246405745257275088548364400416034343698204186575808495616",
    "26": "1"
   },
   {
    "28": "1"
   },
   {
    "0": "1",
    "1": "21888242871839275222246405745257275088548364400416034343698204186575808495616"
   }
  ],
  [
   {
    "21": "21888242871839275222246405745257275088548364400416034343698204186575808495616",
    "26": "1"
   },
   {
    "1": "1"
   },
   {}
  ],
  [
   {
    "22": "21888242871839275222246405745257275088548364400416034343698204186575808495616",
    "29": "1"
   },
   {
    "31": "1"
   },
   {
    "0": "1",
    "2": "21888242871839275222246405745257275088548364400416034343698204186575808495616"
   }
  ],
  [
   {
    "22": "21888242871839275222246405745257275088548364400416034343698204186575808495616",
    "29": "1"
   },
   {
    "2": "1"
   },
   {}
  ],
  [
   {
    "23": "21888242871839275222246405745257275088548364400416034343698204186575808495616",
    "32": "1"
   },
   {
    "34": "1"
   },
   {
    "0": "1",
    "3": "21888242871839275222246405745257275088548364400416034343698204186575808495616"
   }
  ],
  [
   {
    "23": "21888242871839275222246405745257275088548364400416034343698204186575808495616",
    "32": "1"
   },
   {
    "3": "1"
   },
   {}
  ],
  [
   {
    "24": "21888242871839275222246405745257275088548364400416034343698204186575808495616",
    "35": "1"
   },
   {
    "37": "1"
   },
   {
    "0": "1",
    "4": "21888242871839275222246405745257275088548364400416034343698204186575808495616"
   }
  ],
  [
   {
    "24": "21888242871839275222246405745257275088548364400416034343698204186575808495616",
    "35": "1"
   },
   {
    "4": "1"
   },
   {}
  ],
  [
   {
    "25": "21888242871839275222246405745257275088548364400416034343698204186575808495616",
    "38": "1"
   },
   {
    "40": "1"
   },
   {
    "0": "1",
    "5": "21888242871839275222246405745257275088548364400416034343698204186575808495616"
   }
  ],
  [
   {
    "25": "21888242871839275222246405745257275088548364400416034343698204186575808495616",
    "38": "1"
   },
   {
    "5": "1"
   },
   {}
  ]
 ],
 "templates": {
  "CompConstant": "function(ctx) {\n    ctx.setVar(\"sum\", [], \"0\");\n    ctx.setVar(\"b\", [], \"340282366920938463463374607431768211455\");\n    ctx.setVar(\"a\", [], \"1\");\n    ctx.setVar(\"e\", [], \"1\");\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"127\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setVar(\"clsb\", [], bigInt(bigInt(bigInt(ctx.getVar(\"i\",[])).mul(bigInt(\"2\")).mod(__P__)).greater(bigInt(256)) ? 0 : bigInt(ctx.getVar(\"ct\",[])).shr(bigInt(bigInt(ctx.getVar(\"i\",[])).mul(bigInt(\"2\")).mod(__P__))).and(__MASK__)).and(bigInt(\"1\")).and(__MASK__));\n        ctx.setVar(\"cmsb\", [], bigInt(bigInt(bigInt(bigInt(ctx.getVar(\"i\",[])).mul(bigInt(\"2\")).mod(__P__)).add(bigInt(\"1\")).mod(__P__)).greater(bigInt(256)) ? 0 : bigInt(ctx.getVar(\"ct\",[])).shr(bigInt(bigInt(bigInt(ctx.getVar(\"i\",[])).mul(bigInt(\"2\")).mod(__P__)).add(bigInt(\"1\")).mod(__P__))).and(__MASK__)).and(bigInt(\"1\")).and(__MASK__));\n        ctx.setVar(\"slsb\", [], ctx.getSignal(\"in\", [bigInt(ctx.getVar(\"i\",[])).mul(bigInt(\"2\")).mod(__P__)]));\n        ctx.setVar(\"smsb\", [], ctx.getSignal(\"in\", [bigInt(bigInt(ctx.getVar(\"i\",[])).mul(bigInt(\"2\")).mod(__P__)).add(bigInt(\"1\")).mod(__P__)]));\n        if (bigInt(bigInt((bigInt(ctx.getVar(\"cmsb\",[])).eq(bigInt(\"0\")) ? 1 : 0)).and(bigInt((bigInt(ctx.getVar(\"clsb\",[])).eq(bigInt(\"0\")) ? 1 : 0))).and(__MASK__)).neq(bigInt(0))) {\n        {\n            ctx.setSignal(\"parts\", [ctx.getVar(\"i\",[])], bigInt(bigInt(bigInt(bigInt(__P__.sub(bigInt(ctx.getVar(\"b\",[]))).mod(__P__)).mul(bigInt(ctx.getVar(\"smsb\",[]))).mod(__P__)).mul(bigInt(ctx.getVar(\"slsb\",[]))).mod(__P__)).add(bigInt(bigInt(ctx.getVar(\"b\",[])).mul(bigInt(ctx.getVar(\"smsb\",[]))).mod(__P__))).mod(__P__)).add(bigInt(bigInt(ctx.getVar(\"b\",[])).mul(bigInt(ctx.getVar(\"slsb\",[]))).mod(__P__))).mod(__P__));\n            ctx.assert(ctx.getSignal(\"parts\", [ctx.getVar(\"i\",[])]), bigInt(bigInt(bigInt(bigInt(__P__.sub(bigInt(ctx.getVar(\"b\",[]))).mod(__P__)).mul(bigInt(ctx.getVar(\"smsb\",[]))).mod(__P__)).mul(bigInt(ctx.getVar(\"slsb\",[]))).mod(__P__)).add(bigInt(bigInt(ctx.getVar(\"b\",[])).mul(bigInt(ctx.getVar(\"smsb\",[]))).mod(__P__))).mod(__P__)).add(bigInt(bigInt(ctx.getVar(\"b\",[])).mul(bigInt(ctx.getVar(\"slsb\",[]))).mod(__P__))).mod(__P__));\n        }\n\n        } else {\n        if (bigInt(bigInt((bigInt(ctx.getVar(\"cmsb\",[])).eq(bigInt(\"0\")) ? 1 : 0)).and(bigInt((bigInt(ctx.getVar(\"clsb\",[])).eq(bigInt(\"1\")) ? 1 : 0))).and(__MASK__)).neq(bigInt(0))) {\n        {\n            ctx.setSignal(\"parts\", [ctx.getVar(\"i\",[])], bigInt(bigInt(bigInt(bigInt(bigInt(bigInt(ctx.getVar(\"a\",[])).mul(bigInt(ctx.getVar(\"smsb\",[]))).mod(__P__)).mul(bigInt(ctx.getVar(\"slsb\",[]))).mod(__P__)).add(__P__).sub(bigInt(bigInt(ctx.getVar(\"a\",[])).mul(bigInt(ctx.getVar(\"slsb\",[]))).mod(__P__))).mod(__P__)).add(bigInt(bigInt(ctx.getVar(\"b\",[])).mul(bigInt(ctx.getVar(\"smsb\",[]))).mod(__P__))).mod(__P__)).add(__P__).sub(bigInt(bigInt(ctx.getVar(\"a\",[])).mul(bigInt(ctx.getVar(\"smsb\",[]))).mod(__P__))).mod(__P__)).add(bigInt(ctx.getVar(\"a\",[]))).mod(__P__));\n            ctx.assert(ctx.getSignal(\"parts\", [ctx.getVar(\"i\",[])]), bigInt(bigInt(bigInt(bigInt(bigInt(bigInt(ctx.getVar(\"a\",[])).mul(bigInt(ctx.getVar(\"smsb\",[]))).mod(__P__)).mul(bigInt(ctx.getVar(\"slsb\",[]))).mod(__P__)).add(__P__).sub(bigInt(bigInt(ctx.getVar(\"a\",[])).mul(bigInt(ctx.getVar(\"slsb\",[]))).mod(__P__))).mod(__P__)).add(bigInt(bigInt(ctx.getVar(\"b\",[])).mul(bigInt(ctx.getVar(\"smsb\",[]))).mod(__P__))).mod(__P__)).add(__P__).sub(bigInt(bigInt(ctx.getVar(\"a\",[])).mul(bigInt(ctx.getVar(\"smsb\",[]))).mod(__P__))).mod(__P__)).add(bigInt(ctx.getVar(\"a\",[]))).mod(__P__));\n        }\n\n        } else {\n        if (bigInt(bigInt((bigInt(ctx.getVar(\"cmsb\",[])).eq(bigInt(\"1\")) ? 1 : 0)).and(bigInt((bigInt(ctx.getVar(\"clsb\",[])).eq(bigInt(\"0\")) ? 1 : 0))).and(__MASK__)).neq(bigInt(0))) {\n        {\n            ctx.setSignal(\"parts\", [ctx.getVar(\"i\",[])], bigInt(bigInt(bigInt(bigInt(ctx.getVar(\"b\",[])).mul(bigInt(ctx.getVar(\"smsb\",[]))).mod(__P__)).mul(bigInt(ctx.getVar(\"slsb\",[]))).mod(__P__)).add(__P__).sub(bigInt(bigInt(ctx.getVar(\"a\",[])).mul(bigInt(ctx.getVar(\"smsb\",[]))).mod(__P__))).mod(__P__)).add(bigInt(ctx.getVar(\"a\",[]))).mod(__P__));\n            ctx.assert(ctx.getSignal(\"parts\", [ctx.getVar(\"i\",[])]), bigInt(bigInt(bigInt(bigInt(ctx.getVar(\"b\",[])).mul(bigInt(ctx.getVar(\"smsb\",[]))).mod(__P__)).mul(bigInt(ctx.getVar(\"slsb\",[]))).mod(__P__)).add(__P__).sub(bigInt(bigInt(ctx.getVar(\"a\",[])).mul(bigInt(ctx.getVar(\"smsb\",[]))).mod(__P__))).mod(__P__)).add(bigInt(ctx.getVar(\"a\",[]))).mod(__P__));\n        }\n\n        } else {\n        {\n            ctx.setSignal(\"parts\", [ctx.getVar(\"i\",[])], bigInt(bigInt(bigInt(__P__.sub(bigInt(ctx.getVar(\"a\",[]))).mod(__P__)).mul(bigInt(ctx.getVar(\"smsb\",[]))).mod(__P__)).mul(bigInt(ctx.getVar(\"slsb\",[]))).mod(__P__)).add(bigInt(ctx.getVar(\"a\",[]))).mod(__P__));\n            ctx.assert(ctx.getSignal(\"parts\", [ctx.getVar(\"i\",[])]), bigInt(bigInt(bigInt(__P__.sub(bigInt(ctx.getVar(\"a\",[]))).mod(__P__)).mul(bigInt(ctx.getVar(\"smsb\",[]))).mod(__P__)).mul(bigInt(ctx.getVar(\"slsb\",[]))).mod(__P__)).add(bigInt(ctx.getVar(\"a\",[]))).mod(__P__));\n        }\n\n        }\n\n        }\n\n        }\n        ctx.setVar(\"sum\", [], bigInt(ctx.getVar(\"sum\",[])).add(bigInt(ctx.getSignal(\"parts\", [ctx.getVar(\"i\",[])]))).mod(__P__));\n        ctx.setVar(\"b\", [], bigInt(ctx.getVar(\"b\",[])).add(__P__).sub(bigInt(ctx.getVar(\"e\",[]))).mod(__P__));\n        ctx.setVar(\"a\", [], bigInt(ctx.getVar(\"a\",[])).add(bigInt(ctx.getVar(\"e\",[]))).mod(__P__));\n        ctx.setVar(\"e\", [], bigInt(ctx.getVar(\"e\",[])).mul(bigInt(\"2\")).mod(__P__));\n    }\n\n     }\n    ctx.setSignal(\"sout\", [], ctx.getVar(\"sum\",[]));\n    ctx.assert(ctx.getSignal(\"sout\", []), ctx.getVar(\"sum\",[]));\n    ctx.setPin(\"num2bits\", [], \"in\", [], ctx.getSignal(\"sout\", []));\n    ctx.assert(ctx.getPin(\"num2bits\", [], \"in\", []), ctx.getSignal(\"sout\", []));\n    ctx.setSignal(\"out\", [], ctx.getPin(\"num2bits\", [], \"out\", [\"127\"]));\n    ctx.assert(ctx.getSignal(\"out\", []), ctx.getPin(\"num2bits\", [], \"out\", [\"127\"]));\n}\n",
  "AliasCheck": "function(ctx) {\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"254\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    ctx.setPin(\"compConstant\", [], \"in\", [ctx.getVar(\"i\",[])], ctx.getSignal(\"in\", [ctx.getVar(\"i\",[])]));\n    ctx.assert(ctx.getPin(\"compConstant\", [], \"in\", [ctx.getVar(\"i\",[])]), ctx.getSignal(\"in\", [ctx.getVar(\"i\",[])]))\n     }\n    ctx.assert(ctx.getPin(\"compConstant\", [], \"out\", []), \"0\");\n}\n",
  "Num2Bits": "function(ctx) {\n    ctx.setVar(\"lc1\", [], \"0\");\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(ctx.getVar(\"n\",[]))) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setSignal(\"out\", [ctx.getVar(\"i\",[])], bigInt(bigInt(ctx.getVar(\"i\",[])).greater(bigInt(256)) ? 0 : bigInt(ctx.getSignal(\"in\", [])).shr(bigInt(ctx.getVar(\"i\",[]))).and(__MASK__)).and(bigInt(\"1\")).and(__MASK__));\n        ctx.assert(bigInt(ctx.getSignal(\"out\", [ctx.getVar(\"i\",[])])).mul(bigInt(bigInt(ctx.getSignal(\"out\", [ctx.getVar(\"i\",[])])).add(__P__).sub(bigInt(\"1\")).mod(__P__))).mod(__P__), \"0\");\n        ctx.setVar(\"lc1\", [], bigInt(ctx.getVar(\"lc1\",[])).add(bigInt(bigInt(ctx.getSignal(\"out\", [ctx.getVar(\"i\",[])])).mul(bigInt(bigInt(\"2\").modPow(bigInt(ctx.getVar(\"i\",[])), __P__))).mod(__P__))).mod(__P__));\n    }\n\n     }\n    ctx.assert(ctx.getVar(\"lc1\",[]), ctx.getSignal(\"in\", []));\n}\n",
  "Num2Bits_strict": "function(ctx) {\n    ctx.setPin(\"n2b\", [], \"in\", [], ctx.getSignal(\"in\", []));\n    ctx.assert(ctx.getPin(\"n2b\", [], \"in\", []), ctx.getSignal(\"in\", []));\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"254\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setSignal(\"out\", [ctx.getVar(\"i\",[])], ctx.getPin(\"n2b\", [], \"out\", [ctx.getVar(\"i\",[])]));\n        ctx.assert(ctx.getSignal(\"out\", [ctx.getVar(\"i\",[])]), ctx.getPin(\"n2b\", [], \"out\", [ctx.getVar(\"i\",[])]));\n        ctx.setPin(\"aliasCheck\", [], \"in\", [ctx.getVar(\"i\",[])], ctx.getPin(\"n2b\", [], \"out\", [ctx.getVar(\"i\",[])]));\n        ctx.assert(ctx.getPin(\"aliasCheck\", [], \"in\", [ctx.getVar(\"i\",[])]), ctx.getPin(\"n2b\", [], \"out\", [ctx.getVar(\"i\",[])]));\n    }\n\n     }\n}\n",
  "Bits2Num": "function(ctx) {\n    ctx.setVar(\"lc1\", [], \"0\");\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(ctx.getVar(\"n\",[]))) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setVar(\"lc1\", [], bigInt(ctx.getVar(\"lc1\",[])).add(bigInt(bigInt(ctx.getSignal(\"in\", [ctx.getVar(\"i\",[])])).mul(bigInt(bigInt(\"2\").modPow(bigInt(ctx.getVar(\"i\",[])), __P__))).mod(__P__))).mod(__P__));\n    }\n\n     }\n    ctx.setSignal(\"out\", [], ctx.getVar(\"lc1\",[]));\n    ctx.assert(ctx.getSignal(\"out\", []), ctx.getVar(\"lc1\",[]));\n}\n",
  "Bits2Num_strict": "function(ctx) {\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"254\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setPin(\"b2n\", [], \"in\", [ctx.getVar(\"i\",[])], ctx.getSignal(\"in\", [ctx.getVar(\"i\",[])]));\n        ctx.assert(ctx.getPin(\"b2n\", [], \"in\", [ctx.getVar(\"i\",[])]), ctx.getSignal(\"in\", [ctx.getVar(\"i\",[])]));\n        ctx.setPin(\"aliasCheck\", [], \"in\", [ctx.getVar(\"i\",[])], ctx.getSignal(\"in\", [ctx.getVar(\"i\",[])]));\n        ctx.assert(ctx.getPin(\"aliasCheck\", [], \"in\", [ctx.getVar(\"i\",[])]), ctx.getSignal(\"in\", [ctx.getVar(\"i\",[])]));\n    }\n\n     }\n    ctx.setSignal(\"out\", [], ctx.getPin(\"b2n\", [], \"out\", []));\n    ctx.assert(ctx.getSignal(\"out\", []), ctx.getPin(\"b2n\", [], \"out\", []));\n}\n",
  "Num2BitsNeg": "function(ctx) {\n    ctx.setVar(\"lc1\", [], \"0\");\n    ctx.setVar(\"neg\", [], bigInt((bigInt(ctx.getVar(\"n\",[])).eq(bigInt(\"0\")) ? 1 : 0)).neq(bigInt(0)) ? (\"0\") : (bigInt(bigInt(\"2\").modPow(bigInt(ctx.getVar(\"n\",[])), __P__)).add(__P__).sub(bigInt(ctx.getSignal(\"in\", []))).mod(__P__)));\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(ctx.getVar(\"n\",[]))) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setSignal(\"out\", [ctx.getVar(\"i\",[])], bigInt(bigInt(ctx.getVar(\"i\",[])).greater(bigInt(256)) ? 0 : bigInt(ctx.getVar(\"neg\",[])).shr(bigInt(ctx.getVar(\"i\",[]))).and(__MASK__)).and(bigInt(\"1\")).and(__MASK__));\n        ctx.assert(bigInt(ctx.getSignal(\"out\", [ctx.getVar(\"i\",[])])).mul(bigInt(bigInt(ctx.getSignal(\"out\", [ctx.getVar(\"i\",[])])).add(__P__).sub(bigInt(\"1\")).mod(__P__))).mod(__P__), \"0\");\n        ctx.setVar(\"lc1\", [], bigInt(ctx.getVar(\"lc1\",[])).add(bigInt(bigInt(ctx.getSignal(\"out\", [ctx.getVar(\"i\",[])])).mul(bigInt(bigInt(\"2\").modPow(bigInt(ctx.getVar(\"i\",[])), __P__))).mod(__P__))).mod(__P__));\n    }\n\n     }\n    ctx.setPin(\"isZero\", [], \"in\", [], ctx.getSignal(\"in\", []));\n    ctx.assert(ctx.getPin(\"isZero\", [], \"in\", []), ctx.getSignal(\"in\", []));\n    ctx.assert(bigInt(ctx.getVar(\"lc1\",[])).add(bigInt(bigInt(ctx.getPin(\"isZero\", [], \"out\", [])).mul(bigInt(bigInt(\"2\").modPow(bigInt(ctx.getVar(\"n\",[])), __P__))).mod(__P__))).mod(__P__), bigInt(bigInt(\"2\").modPow(bigInt(ctx.getVar(\"n\",[])), __P__)).add(__P__).sub(bigInt(ctx.getSignal(\"in\", []))).mod(__P__));\n}\n",
  "BinSum": "function(ctx) {\n    ctx.setVar(\"nout\", [], ctx.callFunction(\"nbits\", [bigInt(bigInt(bigInt(\"2\").modPow(bigInt(ctx.getVar(\"n\",[])), __P__)).add(__P__).sub(bigInt(\"1\")).mod(__P__)).mul(bigInt(ctx.getVar(\"ops\",[]))).mod(__P__)]));\n    ctx.setVar(\"lin\", [], \"0\");\n    ctx.setVar(\"lout\", [], \"0\");\n    for (ctx.setVar(\"k\", [], \"0\");bigInt(bigInt(ctx.getVar(\"k\",[])).lt(bigInt(ctx.getVar(\"n\",[]))) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"k\", [], bigInt(ctx.getVar(\"k\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        for (ctx.setVar(\"j\", [], \"0\");bigInt(bigInt(ctx.getVar(\"j\",[])).lt(bigInt(ctx.getVar(\"ops\",[]))) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"j\", [], bigInt(ctx.getVar(\"j\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n        {\n            ctx.setVar(\"lin\", [], bigInt(ctx.getVar(\"lin\",[])).add(bigInt(bigInt(ctx.getSignal(\"in\", [ctx.getVar(\"j\",[]),ctx.getVar(\"k\",[])])).mul(bigInt(bigInt(\"2\").modPow(bigInt(ctx.getVar(\"k\",[])), __P__))).mod(__P__))).mod(__P__));\n        }\n\n         }\n    }\n\n     }\n    for (ctx.setVar(\"k\", [], \"0\");bigInt(bigInt(ctx.getVar(\"k\",[])).lt(bigInt(ctx.getVar(\"nout\",[]))) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"k\", [], bigInt(ctx.getVar(\"k\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setSignal(\"out\", [ctx.getVar(\"k\",[])], bigInt(bigInt(ctx.getVar(\"k\",[])).greater(bigInt(256)) ? 0 : bigInt(ctx.getVar(\"lin\",[])).shr(bigInt(ctx.getVar(\"k\",[]))).and(__MASK__)).and(bigInt(\"1\")).and(__MASK__));\n        ctx.assert(bigInt(ctx.getSignal(\"out\", [ctx.getVar(\"k\",[])])).mul(bigInt(bigInt(ctx.getSignal(\"out\", [ctx.getVar(\"k\",[])])).add(__P__).sub(bigInt(\"1\")).mod(__P__))).mod(__P__), \"0\");\n        ctx.setVar(\"lout\", [], bigInt(ctx.getVar(\"lout\",[])).add(bigInt(bigInt(ctx.getSignal(\"out\", [ctx.getVar(\"k\",[])])).mul(bigInt(bigInt(\"2\").modPow(bigInt(ctx.getVar(\"k\",[])), __P__))).mod(__P__))).mod(__P__));\n    }\n\n     }\n    ctx.assert(ctx.getVar(\"lin\",[]), ctx.getVar(\"lout\",[]));\n}\n",
  "IsZero": "function(ctx) {\n    ctx.setSignal(\"inv\", [], bigInt((bigInt(ctx.getSignal(\"in\", [])).eq(bigInt(\"0\")) ? 0 : 1)).neq(bigInt(0)) ? (bigInt(\"1\").mul( bigInt(ctx.getSignal(\"in\", [])).inverse(__P__) ).mod(__P__)) : (\"0\"));\n    ctx.setSignal(\"out\", [], bigInt(bigInt(__P__.sub(bigInt(ctx.getSignal(\"in\", []))).mod(__P__)).mul(bigInt(ctx.getSignal(\"inv\", []))).mod(__P__)).add(bigInt(\"1\")).mod(__P__));\n    ctx.assert(ctx.getSignal(\"out\", []), bigInt(bigInt(__P__.sub(bigInt(ctx.getSignal(\"in\", []))).mod(__P__)).mul(bigInt(ctx.getSignal(\"inv\", []))).mod(__P__)).add(bigInt(\"1\")).mod(__P__));\n    ctx.assert(bigInt(ctx.getSignal(\"in\", [])).mul(bigInt(ctx.getSignal(\"out\", []))).mod(__P__), \"0\");\n}\n",
  "IsEqual": "function(ctx) {\n    ctx.setPin(\"isz\", [], \"in\", [], bigInt(ctx.getSignal(\"in\", [\"1\"])).add(__P__).sub(bigInt(ctx.getSignal(\"in\", [\"0\"]))).mod(__P__));\n    ctx.assert(ctx.getPin(\"isz\", [], \"in\", []), bigInt(ctx.getSignal(\"in\", [\"1\"])).add(__P__).sub(bigInt(ctx.getSignal(\"in\", [\"0\"]))).mod(__P__));\n    ctx.setSignal(\"out\", [], ctx.getPin(\"isz\", [], \"out\", []));\n    ctx.assert(ctx.getSignal(\"out\", []), ctx.getPin(\"isz\", [], \"out\", []));\n}\n",
  "ForceEqualIfEnabled": "function(ctx) {\n    ctx.setPin(\"isz\", [], \"in\", [], bigInt(ctx.getSignal(\"in\", [\"1\"])).add(__P__).sub(bigInt(ctx.getSignal(\"in\", [\"0\"]))).mod(__P__));\n    ctx.assert(ctx.getPin(\"isz\", [], \"in\", []), bigInt(ctx.getSignal(\"in\", [\"1\"])).add(__P__).sub(bigInt(ctx.getSignal(\"in\", [\"0\"]))).mod(__P__));\n    ctx.assert(bigInt(bigInt(\"1\").add(__P__).sub(bigInt(ctx.getPin(\"isz\", [], \"out\", []))).mod(__P__)).mul(bigInt(ctx.getSignal(\"enabled\", []))).mod(__P__), \"0\");\n}\n",
  "LessThan": "function(ctx) {\n    ctx.setPin(\"n2b\", [], \"in\", [], bigInt(bigInt(ctx.getSignal(\"in\", [\"0\"])).add(bigInt(bigInt(ctx.getVar(\"n\",[])).greater(bigInt(256)) ? 0 : bigInt(\"1\").shl(bigInt(ctx.getVar(\"n\",[]))).and(__MASK__))).mod(__P__)).add(__P__).sub(bigInt(ctx.getSignal(\"in\", [\"1\"]))).mod(__P__));\n    ctx.assert(ctx.getPin(\"n2b\", [], \"in\", []), bigInt(bigInt(ctx.getSignal(\"in\", [\"0\"])).add(bigInt(bigInt(ctx.getVar(\"n\",[])).greater(bigInt(256)) ? 0 : bigInt(\"1\").shl(bigInt(ctx.getVar(\"n\",[]))).and(__MASK__))).mod(__P__)).add(__P__).sub(bigInt(ctx.getSignal(\"in\", [\"1\"]))).mod(__P__));\n    ctx.setSignal(\"out\", [], bigInt(\"1\").add(__P__).sub(bigInt(ctx.getPin(\"n2b\", [], \"out\", [ctx.getVar(\"n\",[])]))).mod(__P__));\n    ctx.assert(ctx.getSignal(\"out\", []), bigInt(\"1\").add(__P__).sub(bigInt(ctx.getPin(\"n2b\", [], \"out\", [ctx.getVar(\"n\",[])]))).mod(__P__));\n}\n",
  "LessEqThan": "function(ctx) {\n    ctx.setPin(\"lt\", [], \"in\", [\"0\"], ctx.getSignal(\"in\", [\"0\"]));\n    ctx.assert(ctx.getPin(\"lt\", [], \"in\", [\"0\"]), ctx.getSignal(\"in\", [\"0\"]));\n    ctx.setPin(\"lt\", [], \"in\", [\"1\"], bigInt(ctx.getSignal(\"in\", [\"1\"])).add(bigInt(\"1\")).mod(__P__));\n    ctx.assert(ctx.getPin(\"lt\", [], \"in\", [\"1\"]), bigInt(ctx.getSignal(\"in\", [\"1\"])).add(bigInt(\"1\")).mod(__P__));\n    ctx.setSignal(\"out\", [], ctx.getPin(\"lt\", [], \"out\", []));\n    ctx.assert(ctx.getSignal(\"out\", []), ctx.getPin(\"lt\", [], \"out\", []));\n}\n",
  "GreaterThan": "function(ctx) {\n    ctx.setPin(\"lt\", [], \"in\", [\"0\"], ctx.getSignal(\"in\", [\"1\"]));\n    ctx.assert(ctx.getPin(\"lt\", [], \"in\", [\"0\"]), ctx.getSignal(\"in\", [\"1\"]));\n    ctx.setPin(\"lt\", [], \"in\", [\"1\"], ctx.getSignal(\"in\", [\"0\"]));\n    ctx.assert(ctx.getPin(\"lt\", [], \"in\", [\"1\"]), ctx.getSignal(\"in\", [\"0\"]));\n    ctx.setSignal(\"out\", [], ctx.getPin(\"lt\", [], \"out\", []));\n    ctx.assert(ctx.getSignal(\"out\", []), ctx.getPin(\"lt\", [], \"out\", []));\n}\n",
  "GreaterEqThan": "function(ctx) {\n    ctx.setPin(\"lt\", [], \"in\", [\"0\"], ctx.getSignal(\"in\", [\"1\"]));\n    ctx.assert(ctx.getPin(\"lt\", [], \"in\", [\"0\"]), ctx.getSignal(\"in\", [\"1\"]));\n    ctx.setPin(\"lt\", [], \"in\", [\"1\"], bigInt(ctx.getSignal(\"in\", [\"0\"])).add(bigInt(\"1\")).mod(__P__));\n    ctx.assert(ctx.getPin(\"lt\", [], \"in\", [\"1\"]), bigInt(ctx.getSignal(\"in\", [\"0\"])).add(bigInt(\"1\")).mod(__P__));\n    ctx.setSignal(\"out\", [], ctx.getPin(\"lt\", [], \"out\", []));\n    ctx.assert(ctx.getSignal(\"out\", []), ctx.getPin(\"lt\", [], \"out\", []));\n}\n",
  "VAAS": "function(ctx) {\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(ctx.getVar(\"n\",[]))) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setPin(\"eq\", [ctx.getVar(\"i\",[])], \"in\", [\"0\"], ctx.getSignal(\"result\", [ctx.getVar(\"i\",[])]));\n        ctx.setPin(\"eq\", [ctx.getVar(\"i\",[])], \"in\", [\"1\"], bigInt(bigInt(ctx.getSignal(\"state\", [ctx.getVar(\"i\",[])])).add(__P__).sub(bigInt(ctx.getSignal(\"sub\", [ctx.getVar(\"i\",[])]))).mod(__P__)).add(bigInt(ctx.getSignal(\"add\", [ctx.getVar(\"i\",[])]))).mod(__P__));\n        ctx.setPin(\"eq\", [ctx.getVar(\"i\",[])], \"out\", [], ctx.getSignal(\"yield\", [ctx.getVar(\"i\",[])]));\n        ctx.assert(ctx.getPin(\"eq\", [ctx.getVar(\"i\",[])], \"out\", []), ctx.getSignal(\"yield\", [ctx.getVar(\"i\",[])]));\n    }\n\n     }\n}\n"
 },
 "functions": {
  "nbits": {
   "params": [
    "a"
   ],
   "func": "function(ctx) {\n    ctx.setVar(\"n\", [], \"1\");\n    ctx.setVar(\"r\", [], \"0\");\n    while (bigInt(bigInt(bigInt(ctx.getVar(\"n\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)).lt(bigInt(ctx.getVar(\"a\",[]))) ? 1 : 0).neq(bigInt(0))) {\n    {\n        (ctx.setVar(\"r\", [], bigInt(ctx.getVar(\"r\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__);\n        ctx.setVar(\"n\", [], bigInt(ctx.getVar(\"n\",[])).mul(bigInt(\"2\")).mod(__P__));\n    }\n\n    }\n    return ctx.getVar(\"r\",[]);;\n}\n"
  }
 },
 "nPrvInputs": 20,
 "nPubInputs": 0,
 "nInputs": 20,
 "nOutputs": 5,
 "nVars": 41,
 "nConstants": 0,
 "nSignals": 41
}